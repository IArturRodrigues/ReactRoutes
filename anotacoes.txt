instalando tailwind e styled components {
   yarn add styled-components
   yarn add -D tailwindcss postcss autoprefixer
   yarn add -D twin.macro babel-plugin-styled-components babel-plugin-macros @types/styled-components

   styled-components {
      no package json colocar novo campo {
         "resolutions: {
            "styled-components": "^5"
         }
      }
      verificar a documentação é sempre importante pra ver se isso não mudou
   }

   tailwind {
      yarn init tailwindcss -p

      dentro das config do tailwind {
         content: [
            "./src/**/*.{ts,tsx}"
         ] // todos os arquivos terminados com ts ou tsx poderão receber os styles do tailwind
      }
   }

   nas configs do vs code colocar {
      "tailwindCSS.includeLanguages": {
         "typescript": "javascript", // se usando typescript
         "typescriptreact": "javascript" // se usando typescript no react
      },
      "tailwindCSS.experimental.classRegex": [
         "tw`([^`]*)", // tw`...`
         "tw\\.[^`]+`([^`]*)`", // tw.xxxx<xxx>`...`
         "tw\\(.*?\\).*?`([^`]*)"  // tw(Component)<xxx>`...`
      ],
      "editor.quickSuggestions": {
         "strings": "on"
      }
   }

   adicionando o twin.macro {
      adicionar babel-plugin-macros.config.js
      // babel-plugin-macros.config.js
      module.exports = {
         twin: {
            preset: 'styled-components',
            autoCssProp: false,
         },
      }

      ou no package.json {
         // package.json
         "babelMacros": {
            "twin": {
               "preset": "styled-components"
            }
         },
      }

      depois adicionar nas configurações do vite {
         export default defineConfig({
            plugins: [
               react({
                  babel: {
                  plugins: ['babel-plugin-macros', 'babel-plugin-styled-components'],
                  },
               }),
            ],
         })
      }
   }

   criar uma declaração de modulos na pasta type {
      import 'twin.macro'
      import styledImport, { CSSProp, css as cssImport } from 'styled-components'

      declare module 'twin.macro' {
         // The styled and css imports
         const styled: typeof styledImport
         const css: typeof cssImport
      }

      declare module 'react' {
         // The css prop
         interface HTMLAttributes<T> extends DOMAttributes<T> {
            css?: CSSProp
            tw?: string
         }
         // The inline svg css prop
         interface SVGProps<T> extends SVGProps<SVGSVGElement> {
            css?: CSSProp
            tw?: string
         }
      }

      // The 'as' prop on styled components
      declare global {
         namespace JSX {
            interface IntrinsicAttributes<T> extends DOMAttributes<T> {
               as?: string | Element
            }
         }
      }
   }

   Depois adicione as seguintes configurações no typescript config {
      // tsconfig.json
      {
         // ...
         "compilerOptions": {
            // ...
            "skipLibCheck": true // pode ser que já tenha
         },
         "include": ["src", "types"]
      }
   }

   links {
      https://github.com/ben-rogerson/twin.examples/tree/master/vite-styled-components-typescript
      https://www.npmjs.com/package/twin.macro?activeTab=readme
   }
}

sobre importações dinâmicas no react {
   para podermos fazer importações dinâmicas é preciso colocar os arquivos a serem importados dentro da pasta public na raiz do projeto (caso não exista crie uma)
   importações dinâmicas são feita diretamente pelos atributos do objeto
   importação estática é a que você faz o import diretamente e utiliza ele
   ex de importação estática: import image from '../../assetes/imgs/image.png';
}

useEffect e useLayoutEffect {
   useLayoutEffect é criado antes do jsx e do html se formarem de fato, é bom para dark mode e light mode
   useEffect atualiza a tela
}